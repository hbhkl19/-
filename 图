//#include<iostream>
//#include<fstream>
//#include<string>
//
//using namespace std;
//
//int win[10000][10000];
//
//int visited[10000];
//
//void dfs(int n, int v)
//{
//	visited[v] = 1;
//	for (int i = 0; i < n; i++)
//	{
//		if (win[v][i] != 0)
//		{
//			if (visited[i] == 0)
//				dfs(n, i);
//		}
//	}
//}
//
//void bfs()
//
//int main()
//{
//	int n;
//	fstream fin("in.txt");
//	cin >> n;
//	int tmp;
//	for (int i = 0; i < n; i++)
//	{
//		for (int j = 0; j < n; j++)
//		{
//			cin >> tmp;
//			win[i][j] = tmp;
//		}
//	}
//
//	int ans = 1;
//	dfs(n, 0);
//	for (int i = 0; i < n; i++)
//	{
//		if (visited[i] == 0)
//		{
//			ans++;
//			dfs(n, i);
//		}
//	}
//	cout << ans;
//}


#include<iostream>
#include<string>
#include<queue>

using namespace std;

int visited[10005];

int head[10005];
struct edg
{
	int adj;
	int weight;
	int next;
} edge[10005];

int cnt = 1;

void add(int u, int v, int w)
{
	edge[cnt].adj = v;
	edge[cnt].weight = w;
	edge[cnt].next = head[u];
	head[u] = cnt++;
}

void bfs(int v)
{
	visited[v] = 1;
	queue<int>qu;
	qu.push(v);
	while (!qu.empty())
	{
		int tmp = qu.front();
		qu.pop();
		for (int i = head[tmp]; i != 0; i = edge[i].next)
		{
			if (visited[edge[i].adj] == 0)
			{
				visited[edge[i].adj] = 1;
				qu.push(edge[i].adj);
			}
		}
	}
}

void dfs(int v)
{
	visited[v] = 1;
	for (int i = head[v]; i != 0; i = edge[i].next)
	{
		if (visited[edge[i].adj] == 0)
		{
			dfs(edge[i].adj);
		}
	}
}
int used[10000];
struct node
{
	int val;
	int dis;
	node()
	{
		val = 0;
		dis = 0;
	}
	node(int a, int b)
	{
		val = a;
		dis = b;
	}
};

int distance(int u, int v)
{
	
	queue<node>qu;
	qu.push(node(u, 0));
	used[u] = 1;
	while (!qu.empty())
	{
		node tmp = qu.front(); qu.pop();
		if (tmp.val == v)
			return tmp.dis;
		for (int i = head[tmp.val]; i != 0; i = edge[i].next)
		{
			if (used[edge[i].adj] == 0)
			{
				used[edge[i].adj] = 1;
				qu.push(node(edge[i].adj, tmp.dis + 1));
			}
		}
	}
	return 0x3ffffff;
}

int main()
{
	int tmp;
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			cin >> tmp;
			if (tmp == 1)
			{
				add(i, j, 1);
			}
		}
	}
	/*int ans = 1;
	bfs(0);
	for (int i = 0; i < n; i++)
	{
		if (visited[i] == 0)
		{
			ans++;
			bfs(i);
		}
	}
	cout << ans;*/

	int ans = 1;
	dfs(0);
	for (int i = 0; i < n; i++)
	{
		if (visited[i] == 0)
		{
			ans++;
			dfs(i);
		}
	}
	cout << ans;
}
